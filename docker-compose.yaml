version: '3.7'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16
    hostname: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-mlflowdb}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # MySQL Database
  mysql:
    image: mysql:9.0.1
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-monitoring}
      - MYSQL_USER=${MYSQL_USER:-monitoring_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-monitoring_password}
    volumes:
      - mysql_data:/var/lib/mysql

  # MinIO server
  minio:
    image: minio/minio:RELEASE.2024-07-31T05-46-26Z.fips
    hostname: minio
    expose:
      - "9000"
      - "9001"
    ports:
      - "9000:9000"
      # MinIO Console is available at http://localhost:9001
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minio_user}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minio_password}
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  # Create a bucket named "bucket" if it doesn't exist
  minio-create-bucket:
    image: minio/mc:RELEASE.2024-07-26T13-08-44Z.fips
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 minio_user minio_password &&
      mc mb minio/bucket --ignore-existing  &&
      mc mb minio/artifacts --ignore-existing  &&
      mc mb minio/data --ignore-existing  &&
      mc cp --recursive /data minio/
      "
    volumes:
      - ./data:/data

  mlflow_server:
    build: ./mlflow_server
    image: mlflow_server
    container_name: mlflow_server
    hostname: mlflow_server
    depends_on:
      - postgres
    ports:
      - 5000:5000
      - 32785:32785
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minio_user}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minio_password}
      - AWS_ENDPOINT_URL=http://minio:9000
      - AWS_DEFAULT_REGION=${AWS_REGION:-us-west-2}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - MLFLOW_S3_IGNORE_TLS=true
      - MLFLOW_BUCKET_NAME=artifacts
      - POSTGRES_DBNAME=${POSTGRES_DB:-mlflowdb}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      --host 0.0.0.0
      --port 5000
      --no-serve-artifacts
      --default-artifact-root s3://${MLFLOW_BUCKET_NAME}

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  mageai:
    image: mageai
    command: mage start mlops_zoomcamp_project
    env_file:
      - .env
    build: ./mage_server
    environment:
      - USER_CODE_PATH=/home/src/mlops_zoomcamp_project
      - ENV=${ENV:-dev}
      # AWS env variables
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minio_user}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minio_password}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - AWS_ENDPOINT=${AWS_ENDPOINT:-http://minio:9000}
      # MLFlow env variables
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - MLFLOW_S3_IGNORE_TLS=true
      - MLFLOW_BUCKET_NAME=artifacts
      # Postgress env variables
      - POSTGRES_HOST=postgres
      - POSTGRES_DBNAME=${POSTGRES_DB:-mlflowdb}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - 6789:6789
    volumes:
      - ./mage_server:/home/src/
    restart: on-failure:5

  webserver:
    image: model_webserver
    build: ./web_service
    depends_on:
      - postgres
      - mlflow_server
      - mageai
    ports:
      - 9696:9696
    environment:
      # AWS env variables
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minio_user}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minio_password}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL:-http://minio:9000}
      # Postgress env variables
      - POSTGRES_HOST=postgres
      - POSTGRES_DBNAME=${POSTGRES_DB:-mlflowdb}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      # MySQL env variables
      - MYSQL_HOST=${MYSQL_HOST:-mysql}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-monitoring}
      - MYSQL_USER=${MYSQL_USER:-monitoring_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-monitoring_password}

  grafana:
    image: grafana/grafana
    user: "472"
    ports:
      - "3000:3000"
    depends_on:
      - webserver
    volumes:
      - ./grafana/config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./grafana/config/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./grafana/dashboards:/opt/grafana/dashboards

volumes:
  postgres_data:
  minio_data:
  mysql_data:

